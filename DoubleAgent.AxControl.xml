<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly> <name>Double Agent AxControl</name></assembly>
<members>

<member name="M:DoubleAgent.AxControl.AxControl.FindCharacterSREngines(System.Object,System.Object)">
<summary>Retrieves a collection of "Speech Recognition Engine" Objects that meet a specific character's requirements.</summary>
<param name="Provider">A string value that specifies the character file, or an empty string for the default character.</param>
<param name="LanguageID">An optional numeric value that specifies the language to match, or zero to match any language.</param>
<returns name="SREngines">An <see cref="T:DoubleAgent.Control.SREngines" /> Collection that matches the character's text-to-speech requirements and the specified <paramref name="LanguageID" /> (if any).</returns>
<remarks>
<para>This method allows you to choose a speech recognition engine without loading the character.
</para>
<para name="Provider">For more information on specifying character file names, see the <see cref="M:DoubleAgent.Control.Characters.Load" /> method.
</para>
<note name="Provider">This method does not support the HTTP protocol for character files.</note>
</remarks>
</member>

<member name="M:DoubleAgent.AxControl.AxControl.FindCharacterTTSEngines(System.Object,System.Object)">
<summary>Retrieves a collection of "Text-To-Speech Engine" Objects that meet a specific character's requirements.</summary>
<param name="Provider">A string value that specifies the character file, or an empty string for the default character.</param>
<param name="LanguageID">An optional numeric value that specifies the language to match, or zero to match any language.</param>
<returns name="TTSEngines">A <see cref="T:DoubleAgent.Control.TTSEngines" /> Collection that matches the character's text-to-speech requirements and the specified <paramref name="LanguageID" /> (if any).</returns>
<remarks>
<para>This method allows you to choose a text-to-speech engine without loading the character.
</para>
<para name="Provider">For more information on specifying character file names, see the <see cref="M:DoubleAgent.Control.Characters.Load" /> method.
</para>
<note name="Provider">This method does not support the HTTP protocol for character files.</note>
</remarks>
</member>

<member name="M:DoubleAgent.AxControl.AxControl.FindSREngines(System.Object)">
<summary>Retrieves a collection of "Speech Recognition Engine" Objects for a specific language.</summary>
<param name="LanguageID">A numeric value that specifies the language to match, or zero for any language.</param>
<returns name="SREngines">An <see cref="T:DoubleAgent.Control.SREngines" /> Collection that matches the the specified <paramref name="LanguageID" />.</returns>
<remarks>
<para>This method allows you to query available speech recognition engines without loading a character.
</para>
<note>Using this method with zero for the <paramref name="LanguageID" /> is equivalent to using the <see cref="P:AxControl.SREngines" /> property.</note>
</remarks>
</member>

<member name="M:DoubleAgent.AxControl.AxControl.FindTTSEngines(System.Object,System.Object)">
<summary>Retrieves a collection of "Text-To-Speech Engine" Objects for a specific language and gender.</summary>
<param name="LanguageID">A numeric value that specifies the language to match, or zero for any language.</param>
<param name="Gender">A numeric value, or a member of the <see cref="T:DoubleAgent.Control.SpeechGenderType" /> Enumeration, that specifies the gender to match:<para />1 = Female <b>…</b> A female voice.<para />2 = Male <b>…</b> A male voice.<para />0 = Neutral <b>…</b> Either a female or male voice.</param>
<returns name="TTSEngines">A <see cref="T:DoubleAgent.Control.TTSEngines" /> Collection that matches the the specified <paramref name="LanguageID" /> and <paramref name="Gender" />.</returns>
<remarks>
<para>This method allows you to query available text-to-speech engines without loading a character.
</para>
</remarks>
</member>

<member name="M:DoubleAgent.AxControl.AxControl.GetCharacterSREngine(System.Object)">
<summary>Retrieves a "Speech Recognition Engine" Object that meets a specific character's requirements.</summary>
<param name="Provider">A string value that specifies the character file, or an empty string for the default character.</param>
<returns name="SREngine">The <see cref="T:DoubleAgent.Control.SREngine" /> Object that matches the character's speech recognition requirements (if any).</returns>
<remarks>
<para>This method allows you to query a character's <em>default</em> speech recognition engine without loading the character.
</para>
<para name="Provider">For more information on specifying character file names, see the <see cref="M:DoubleAgent.Control.Characters.Load" /> method.
</para>
<note name="Provider">This method does not support the HTTP protocol for character files.</note>
</remarks>
</member>

<member name="M:DoubleAgent.AxControl.AxControl.GetCharacterTTSEngine(System.Object)">
<summary>Retrieves a "Text-To-Speech Engine" Object that meets a specific character's requirements.</summary>
<param name="Provider">A string value that specifies the character file, or an empty string for the default character.</param>
<returns name="TTSEngine">The <see cref="T:DoubleAgent.Control.TTSEngine" /> Object that matches the character's text-to-speech requirements (if any).</returns>
<remarks>
<para>This method allows you to query a character's <em>default</em> text-to-speech engine without loading the character.
</para>
<para name="Provider">For more information on specifying character file names, see the <see cref="M:DoubleAgent.Control.Characters.Load" /> method.
</para>
<note name="Provider">This method does not support the HTTP protocol for character files.</note>
</remarks>
</member>

<member name="M:DoubleAgent.AxControl.AxControl.ShowDefaultCharacterProperties(System.Object,System.Object)">
<summary>Shows the <see cref="e08466be-419c-11e1-9d4f-002421116fb2#Gallery">Gallery</see> page of the <see cref="e08466be-419c-11e1-9d4f-002421116fb2">Advanced Character Options</see> window.</summary>
<param name="X">The horizontal position, in pixels, of the "Advanced Character Options" window. This parameter is optional. For programming languages that don't support optional parameters, a negative value will be ignored.</param>
<param name="Y">The vertical position, in pixels, of the "Advanced Character Options" window. This parameter is optional. For programming languages that don't support optional parameters, a negative value will be ignored.</param>
<remarks>
<para>This method is obsolete, but is still supported for backward compatibility. Calling it shows the <see cref="e08466be-419c-11e1-9d4f-002421116fb2">Advanced Character Options</see> window. New applications should use the <see cref="T:DoubleAgent.Control.PropertySheet" /> Object instead.
</para>
<para>If you don't specify the <paramref name="X" /> and <paramref name="Y" /> coordinates (or use a negative value for programming languages that don't support optional parameters), the window appears at the last location it was displayed.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.AudioOutput">
<summary>deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:AxControl.Settings" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.AutoConnect">
<summary>Specifies if the Double Agent control will automatically connect to the Double Agent server.</summary>
<returns>A numeric value specifying whether automatic connection is enabled.
<para>On a 32-bit system:
</para>
<para />0 <b>…</b> The control will <em>not</em> automatically connect to the server. <para />Any non-zero value <b>…</b> The control will automatically connect to the server.<br />This is the default value. 
<para>On a 64-bit system:
</para>
<para />0 <b>…</b> The control will <em>not</em> automatically connect to the server. <para />32 <b>…</b> The control will automatically connect to the 32-bit server. If the 32-bit server is not installed, the 64-bit server will be used.<br />This the default value for Double Agent Version 1.2 or later. <para />64 <b>…</b> The control will automatically connect to the 64-bit server. If the 64-bit server is not installed, the 32-bit server will be used.<br />This the default value for Double Agent Version 1.1. <para />Any other non-zero value <b>…</b> The control will automatically connect to server with the same architecture as the calling process. If the matching server is not installed, then the other server will be used.</returns>
<remarks>
<para>If this property is non-zero, then the control will automatically establish a connection with the server the first time it's required. To use the control in <see cref="e084673a-419c-11e1-9d4f-002421116fb2#standalone">stand-alone</see> mode, you must set this property to zero.
</para>
<para>This property is only used the <em>first time</em> a server connection is required.  After that, any change to this property will be ignored.
</para>
<note>The <see cref="e0846736-419c-11e1-9d4f-002421116fb2#ControlOCX">downloadable stand-alone</see> control always runs in <see cref="e084673a-419c-11e1-9d4f-002421116fb2#standalone">stand-alone</see> mode.  Therefore, when using DaControl.OCX, this property is always zero.</note>
</remarks>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.CtlAutoSize">
<summary>Specifies if the ActiveX<sup>®</sup> control is automatically sized to fit the <see cref="P:AxControl.ControlCharacter" />.</summary>
<returns>A boolean value that specifies if the control's size is automatically adjusted to exactly fit the "contained character".</returns>
<remarks>
<note name="ContainedOnly">This property is relevant only when the control is visible (i.e. when it's used in <see cref="e084673a-419c-11e1-9d4f-002421116fb2">contained</see> mode).</note>
</remarks>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.CtlBackColor">
<summary>Specifies the ActiveX<sup>®</sup> control's background color.</summary>
<returns>An System.Drawing.Color value for the control's background color.</returns>
<remarks>
<note name="ContainedOnly">This property is relevant only when the control is visible (i.e. when it's used in <see cref="e084673a-419c-11e1-9d4f-002421116fb2">contained</see> mode).</note>
</remarks>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.CtlBorderColor">
<summary>Specifies the ActiveX<sup>®</sup> control's border color.</summary>
<returns>An System.Drawing.Color value for the control's border color.</returns>
<remarks>
<note name="ContainedOnly">This property is relevant only when the control is visible (i.e. when it's used in <see cref="e084673a-419c-11e1-9d4f-002421116fb2">contained</see> mode).</note>
</remarks>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.CtlBorderStyle">
<summary>Specifies the style of the ActiveX<sup>®</sup> control's border.</summary>
<returns>A numeric value that specifies the border style as follows:<para />0 = Default <b>…</b> The default border style (default for the target environment)<para />1 = FixedSingle <b>…</b> A fixed-width single line of width <see cref="P:AxControl.CtlBorderWidth" /> and color <see cref="P:AxControl.CtlBorderColor" /></returns>
<remarks>
<note name="ContainedOnly">This property is relevant only when the control is visible (i.e. when it's used in <see cref="e084673a-419c-11e1-9d4f-002421116fb2">contained</see> mode).</note>
</remarks>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.CtlBorderVisible">
<summary>Specifies if the ActiveX<sup>®</sup> control's has a visible border.</summary>
<returns>An boolean value that indicates if the border is visible.</returns>
<remarks>
<note name="ContainedOnly">This property is relevant only when the control is visible (i.e. when it's used in <see cref="e084673a-419c-11e1-9d4f-002421116fb2">contained</see> mode).</note>
</remarks>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.CtlBorderWidth">
<summary>Specifies the width of the ActiveX<sup>®</sup> control's border.</summary>
<returns>An numeric value that specifies the border width, in pixels.</returns>
<remarks>
<note name="ContainedOnly">This property is relevant only when the control is visible (i.e. when it's used in <see cref="e084673a-419c-11e1-9d4f-002421116fb2">contained</see> mode).</note>
</remarks>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.CtlMousePointer">
<summary>Specifies the pointer to show when the mouse moves over the ActiveX<sup>®</sup> control.</summary>
<returns>A numeric value that specifies the pointer style as follows:<para />0 = Default <b>…</b> The default pointer style (default for the target environment)<para />1 = Arrow <b>…</b> The arrow-shaped pointer<para />2 = Cross <b>…</b> The cross-shaped pointer<para />11 = Hourglass <b>…</b> The "wait" pointer<para />12 = No Drop <b>…</b> The pointer that indicates that drag-and-drop is not possible here<para />13 = Arrow and Hourglass <b>…</b> The pointer that indicates that an application is starting<para />14 = Arrow and Question <b>…</b> The pointer used for "What's this?" help<para />16 = Hand <b>…</b> The hand-shaped pointer</returns>
<remarks>
<note name="ContainedOnly">This property is relevant only when the control is visible (i.e. when it's used in <see cref="e084673a-419c-11e1-9d4f-002421116fb2">contained</see> mode).</note>
</remarks>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.CharacterFiles">
<summary>Returns the control's <see cref="T:DoubleAgent.Control.CharacterFiles" /> Object.</summary>
<returns>The control's <see cref="T:DoubleAgent.Control.CharacterFiles" /> Object.</returns>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.Characters">
<summary>Returns the control's <see cref="T:DoubleAgent.Control.Characters" /> Collection.</summary>
<returns>The control's <see cref="T:DoubleAgent.Control.Characters" /> Collection.</returns>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.CharacterStyle">
<summary>Specifies the initial style to use when a <see cref="T:DoubleAgent.Control.Character" /> is loaded.</summary>
<returns>A numeric bit-field value that specifies the <see cref="P:DoubleAgent.Control.Character.Style" /> to apply when a <see cref="T:DoubleAgent.Control.Character" /> is loaded:<para />&amp;H00000001 = SoundEffects <b>…</b> The animation sound effects are played.<para />&amp;H00000002 = IdleEnabled <b>…</b> The character enters idle mode and shows it's idling animations when it's not doing anything else.<para />&amp;H00000004 = AutoPopupMenu <b>…</b> A right-click on the character or it's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see> automatically shows a <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Menu">pop-up menu</see>.<para />&amp;H00000008 = IconShown <b>…</b> The character has a <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see> in the taskbar notification area.<para />&amp;H00000020 = SmoothEdges <b>…</b> Image smoothing (antialiasing) is applied to the edges of the character's animations.<para />&amp;H00000030 = Smoothed <b>…</b> Image smoothing (antialiasing) is applied to the character's animations.<para />&amp;H00000100 = SuspendPause <b>…</b> All requests are paused when the client is not in the foreground.<para />&amp;H00000200 = SuspendStop <b>…</b> All requests are stopped when the client is not in the foreground.<para />&amp;H00000400 = SuspendHide <b>…</b> All floating windows are hidden when the client is not in the foreground.</returns>
<remarks>
<para>Setting this property allows you to establish a default <see cref="T:DoubleAgent.Control.Character" />.<see cref="P:DoubleAgent.Control.Character.Style" /> for you application. It's initial value is <see cref="F:DoubleAgent.Control.CharacterStyleFlags.AutoPopupMenu" />, <see cref="F:DoubleAgent.Control.CharacterStyleFlags.IdleEnabled" />, <see cref="F:DoubleAgent.Control.CharacterStyleFlags.IconShown" />, <see cref="F:DoubleAgent.Control.CharacterStyleFlags.SoundEffects" />.
</para>
<para>The <see cref="F:DoubleAgent.Control.CharacterStyleFlags.Smoothed" /> and <see cref="F:DoubleAgent.Control.CharacterStyleFlags.SmoothEdges" /> flags can only be changed here. Once a <see cref="T:DoubleAgent.Control.Character" /> is loaded, these bits <strong>cannot</strong> be changed in it's <see cref="P:DoubleAgent.Control.Character.Style" /> property. Also, these two settings are only used the first time the character is loaded. If another client has already loaded the character, it's smoothing settings will not change. If your client application is the first client to load the character, then your smoothing settings will apply to all clients.
</para>
<note>For compatibility with Microsoft<sup>®</sup> Agent, the <see cref="F:DoubleAgent.Control.CharacterStyleFlags.IconShown" /> flag is set by default. To load a <see cref="T:DoubleAgent.Control.Character" /> without showing it's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>, set the <see cref="F:DoubleAgent.Control.CharacterStyleFlags.IconShown" /> flag off.</note>
</remarks>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.CommandsWindow">
<summary>Returns the control's <see cref="T:DoubleAgent.Control.CommandsWindow" /> Object.</summary>
<returns>The control's <see cref="T:DoubleAgent.Control.CommandsWindow" /> Object.</returns>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.Connected">
<summary>Specifies if the control is currently connected to the Double Agent server. The Double Agent control will work whether or not it's connected to the server, but there are are special considerations in each case. See <see cref="e084673a-419c-11e1-9d4f-002421116fb2">Connected, Stand-Alone, and Contained</see> for more information.</summary>
<returns>A boolean value specifying whether the control is connected.</returns>
<remarks>
<para>You can manually open or close the connection to the server by changing the Connected property. When the connection state changes, any characters you've loaded are automatically unloaded. If you still have references to any objects except the control itself, any attempt to access the objects' properties or methods will fail.
</para>
<note>The <see cref="e0846736-419c-11e1-9d4f-002421116fb2#ControlOCX">downloadable stand-alone</see> control always runs in <see cref="e084673a-419c-11e1-9d4f-002421116fb2#standalone">stand-alone</see> mode.  Therefore, when using DaControl.OCX, this property is always false.</note>
</remarks>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.ControlCharacter">
<summary>Specifies the control's <see cref="e084673a-419c-11e1-9d4f-002421116fb2#contained">contained</see> character.</summary>
<returns>The <see cref="T:DoubleAgent.Control.Character" /> Object object that's contained within the visible area of the control, or an empty reference (Nothing).</returns>
<remarks>
<para>Setting the ControlCharacter property to a <see cref="T:DoubleAgent.Control.Character" /> Object changes the control from <see cref="e084673a-419c-11e1-9d4f-002421116fb2#standalone">stand-alone</see> mode to <see cref="e084673a-419c-11e1-9d4f-002421116fb2#contained">contained</see> mode. Setting ControlCharacter to an empty reference changes the control from <see cref="e084673a-419c-11e1-9d4f-002421116fb2#contained">contained</see> mode back to <see cref="e084673a-419c-11e1-9d4f-002421116fb2#standalone">stand-alone</see> mode.
</para>
<para>Normally, the control isn't visible at runtime, but when it has a ControlCharacter it will become visible as a child window of its containing form. This is the only time the ActiveX<sup>®</sup>appearance properties, such as <see cref="P:AxControl.CtlBackColor" /> and <see cref="P:AxControl.CtlBorderColor" />, are used.
</para>
<note>You cannot set the ControlCharacter property if the control is <see cref="P:AxControl.Connected" /> to the server.</note>
</remarks>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.PropertySheet">
<summary>Returns the control's <see cref="T:DoubleAgent.Control.PropertySheet" /> Object.</summary>
<returns>The control's <see cref="T:DoubleAgent.Control.PropertySheet" /> Object.</returns>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.RaiseRequestErrors">
<summary>Specifies if an error condition is raised (an exception thrown) for failed requests.</summary>
<returns>A boolean value that determines whether errors are raised for failed requests. The default value is True.</returns>
<remarks>
<para>When a method that returns a <see cref="T:DoubleAgent.Control.Request" /> Object fails, there are two ways to detect the error. If RaiseRequestErrors is set, the Double Agent control will raise an error condition. If it's not set, you can check the <see cref="T:DoubleAgent.Control.Request" /> Object's <see cref="P:DoubleAgent.Control.Request.Status" /> property. An example of a request error is when you specify an animation name that doesn't exist for the <see cref="M:DoubleAgent.Control.Character.Play" /> method.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.Settings">
<summary>Returns the control's <see cref="T:DoubleAgent.Control.Settings" /> Object.</summary>
<returns>The control's <see cref="T:DoubleAgent.Control.Settings" /> Object.</returns>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.SpeechInput">
<summary>deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:AxControl.Settings" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.SREngines">
<summary>Returns a collection of "Speech Recognition Engine" Objects for all available speech recognition engines.</summary>
<returns>An <see cref="T:DoubleAgent.Control.SREngines" /> Collection that includes all available speech recognition engines.</returns>
<remarks>
<para>This property allows you to query available speech recognition engines without loading a character.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.AxControl.AxControl.TTSEngines">
<summary>Returns a collection of "Text-To-Speech Engine" Objects for all available text-to-speech engines.</summary>
<returns>A <see cref="T:DoubleAgent.Control.TTSEngines" /> Collection that includes all available text-to-speech engines.</returns>
<remarks>
<para>This property allows you to query available text-to-speech engines without loading a character.
</para>
</remarks>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlActivateInput">
<summary>Signalled when a client becomes input-active.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlActivateInputEvent" /> Object that contains the event data: <para /> <see cref="F:CtlActivateInputEvent.CharacterID" /> <b>…</b> The unique identifier of the character that has become input-active.</param>
<remarks>
<para>The input-active client receives mouse and speech input events for the character. Double Agent sends this event only to the client that becomes input-active.
</para>
<para>This event can occur when the user uses your <see cref="T:DoubleAgent.Control.Commands" /> Collection, for example, by choosing a <see cref="T:DoubleAgent.Control.Commands" /> Collection entry in the <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#VoiceCommands">Voice Commands</see> window or in the <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Menu">pop-up menu</see> window for a character. It can also occur when the user selects a character (by clicking or speaking its name), when a character becomes visible, or when the character of another client application becomes hidden.
</para>
<para>You can also call the <see cref="M:DoubleAgent.Control.Character.Activate" /> method with <paramref name="State" /> set to 2 (<see cref="F:DoubleAgent.Control.ActiveStateType.InputActive" />) to explicitly make the character topmost, which results in your client application becoming input-active and triggers this event. However, this event does not occur if you use the <see cref="M:DoubleAgent.Control.Character.Activate" /> method only to specify whether or not your client is the active client of the character.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlActivateInputEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlActivateInput" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlActiveClientChange">
<summary>Signalled when the active client of the character changes.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlActiveClientChangeEvent" /> Object that contains the event data: <para /> <see cref="F:CtlActiveClientChangeEvent.CharacterID" /> <b>…</b> The unique identifier of the character that has become active or inactive.<para /> <see cref="F:CtlActiveClientChangeEvent.Active" /> <b>…</b> True if the character has become the active client or False if it's no longer the active client.</param>
<remarks>
<para>When multiple clients (<see cref="T:AxControl" /> instances) share the same character, the active client of the character receives mouse input (for example, click or drag events). Similarly, when multiple characters are displayed, the active client of the topmost character (also known as the input-active client) receives <see cref="E:AxControl.CtlCommand" /> events.
</para>
<para>A client application may receive this event when the user selects one of the client's entries in the character's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Menu">pop-up menu</see> or by voice command, when the client application changes its active status, or when another client terminates.
</para>
<para>Double Agent sends this event only to the clients that are directly affected; that either become the active client or stop being the active client.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlActiveClientChangeEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlActiveClientChange" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlAgentPropertyChange">
<summary>Signalled when the user changes a property in the <see cref="e08466be-419c-11e1-9d4f-002421116fb2">Advanced Character Options</see> window.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">An EventArgs object that contains no event data.</param>
<remarks>
<para>This event indicates that the user has changed and applied any property in the <see cref="e08466be-419c-11e1-9d4f-002421116fb2">Advanced Character Options</see> window. You can use the <see cref="T:DoubleAgent.Control.Settings" /> Object to query the specific property settings.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlAgentPropertyChangeEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlAgentPropertyChange" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlBalloonHide">
<summary>Signalled when a character's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Balloon">word balloon</see> is hidden.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlBalloonHideEvent" /> Object that contains the event data: <para /> <see cref="F:CtlBalloonHideEvent.CharacterID" /> <b>…</b> The unique identifier of the character who's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Balloon">word balloon</see> was hidden.</param>
<remarks>
<para>Double Agent sends this event only to all clients of the character (applications that have loaded the character).
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlBalloonHideEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlBalloonHide" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlBalloonShow">
<summary>Signalled when a character's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Balloon">word balloon</see> is shown.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlBalloonShowEvent" /> Object that contains the event data: <para /> <see cref="F:CtlBalloonShowEvent.CharacterID" /> <b>…</b> The unique identifier of the character who's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Balloon">word balloon</see> was shown.</param>
<remarks>
<para>Double Agent sends this event only to all clients of the character (applications that have loaded the character).
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlBalloonShowEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlBalloonShow" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlBookmark">
<summary>Signalled when a bookmark defined by your application in a speech text string is reached.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlBookmarkEvent" /> Object that contains the event data: <para /> <see cref="F:CtlBookmarkEvent.BookmarkID" /> <b>…</b> The bookmark's unique identifier.</param>
<remarks>
<para>To specify a bookmark event, use the <see cref="M:DoubleAgent.Control.Character.Speak" /> or <see cref="M:DoubleAgent.Control.Character.SpeakFormatted" /> method with a Mrk tag in your supplied text. For more information about tags, see <see cref="e08466ca-419c-11e1-9d4f-002421116fb2">Speech Output Tags</see>.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlBookmarkEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlBookmark" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlClick">
<summary>Signalled when the user clicks a character, or the character's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlClickEvent" /> Object that contains the event data: <para /> <see cref="F:CtlClickEvent.CharacterID" /> <b>…</b> The unique identifier of the character that was clicked.<para /> <see cref="F:CtlClickEvent.Button" /> <b>…</b> A numeric value that identifies which mouse button was pressed and released to cause the event. The <paramref name="Button" /> parameter is a bit field with bits corresponding to the left button (bit 0) (&amp;H0001), right button (bit 1) (&amp;H0002), and middle button (bit 2) (&amp;H0004). Only one of the bits is set, indicating the mouse button that caused the event. If the character has a <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>, and bit 13 (&amp;H1000) is also set, the click occurred on the <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>.<para /> <see cref="F:CtlClickEvent.Shift" /> <b>…</b> A numeric value that corresponds to the state of the Shift, Ctrl, and Alt keys when the mouse button was pressed or released. The <paramref name="Shift" /> parameter is a bit field with bits corresponding to the Shift key (bit 0) (&amp;H0001), the Ctrl key (bit 1) (&amp;H0002), and the Alt key (bit 2) (&amp;H0004). A bit is set if the key is down. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are down. For example, if both Ctrl and Alt were down, the  value of <paramref name="Shift" /> would be 6.<para /> <see cref="F:CtlClickEvent.X" /> <b>…</b> The current horizontal location of the mouse pointer, in pixels, relative to the left side of the screen.<para /> <see cref="F:CtlClickEvent.Y" /> <b>…</b> The current vertical location of the mouse pointer, in pixels, relative to the top of the screen.</param>
<remarks>
<para>This event is sent only to the input-active client of a character. When the user clicks a character or its <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see> with no input-active client, Double Agent sends the event to its active client. If the character is visible (<see cref="P:DoubleAgent.Control.Character.Visible" /> is True), the user's action also sets the character's current input-active client as the last input-active client, sending the <see cref="E:AxControl.CtlActivateInput" /> event to that client, and then sending the CtlClick event. If the character is hidden (<see cref="P:DoubleAgent.Control.Character.Visible" /> is False), and the user clicks the character's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see> using button 1, the character is also automatically shown.
</para>
<note>Clicking a character does not disable all other character output. However, pressing the Listening key <em>does</em> flush the input-active character's output and triggers the <see cref="E:AxControl.CtlRequestComplete" /> event, passing a <see cref="P:DoubleAgent.Control.Request.Status" /> that indicates that the client's queue was interrupted.</note>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlClickEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlClick" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlCommand">
<summary>Signalled when the user chooses a (client's) command.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlCommandEvent" /> Object that contains the event data: <para /> <see cref="F:CtlCommandEvent.UserInput" /> <b>…</b> A <see cref="T:DoubleAgent.Control.UserInput" /> Object that identifies the chosen command.</param>
<remarks>
<para>Double Agent sends this event when your application is input-active and the user chooses a command from the character's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Menu">pop-up menu</see>, or by spoken input.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlCommandEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlCommand" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlDblClick">
<summary>Signalled when the user double-clicks a character.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlDblClickEvent" /> Object that contains the event data: <para /> <see cref="F:CtlDblClickEvent.CharacterID" /> <b>…</b> The unique identifier of the character that was double-clicked.<para /> <see cref="F:CtlDblClickEvent.Button" /> <b>…</b> A numeric value that identifies which mouse button was pressed and released to cause the event. The <paramref name="Button" /> parameter is a bit field with bits corresponding to the left button (bit 0) (&amp;H0001), right button (bit 1) (&amp;H0002), and middle button (bit 2) (&amp;H0004). Only one of the bits is set, indicating the mouse button that caused the event. If the character has a <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>, and bit 13 (&amp;H1000) is also set, the click occurred on the <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>.<para /> <see cref="F:CtlDblClickEvent.Shift" /> <b>…</b> A numeric value that corresponds to the state of the Shift, Ctrl, and Alt keys when the mouse button was pressed or released. The <paramref name="Shift" /> parameter is a bit field with bits corresponding to the Shift key (bit 0) (&amp;H0001), the Ctrl key (bit 1) (&amp;H0002), and the Alt key (bit 2) (&amp;H0004). A bit is set if the key is down. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are down. For example, if both Ctrl and Alt were down, the  value of <paramref name="Shift" /> would be 6.<para /> <see cref="F:CtlDblClickEvent.X" /> <b>…</b> The current horizontal location of the mouse pointer, in pixels, relative to the left side of the screen.<para /> <see cref="F:CtlDblClickEvent.Y" /> <b>…</b> The current vertical location of the mouse pointer, in pixels, relative to the top of the screen.</param>
<remarks>
<para>This event is sent only to the input-active client of a character. When the user double-clicks a character or its <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see> with no input-active client, Double Agent sends the event to its active client. If the character is visible (<see cref="P:DoubleAgent.Control.Character.Visible" /> is True), the user's action also sets the character's current input-active client as the last input-active client, sending the <see cref="E:AxControl.CtlActivateInput" /> event to that client, and then sending the CtlDblClick event. If the character is hidden (<see cref="P:DoubleAgent.Control.Character.Visible" /> is False), and the user double-clicks the character's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see> using button 1, the character is also automatically shown.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlDblClickEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlDblClick" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlDeactivateInput">
<summary>Signalled when a client becomes non-input-active.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlDeactivateInputEvent" /> Object that contains the event data: <para /> <see cref="F:CtlDeactivateInputEvent.CharacterID" /> <b>…</b> The unique identifier of the character that has become non-input-active.</param>
<remarks>
<para>A non-input-active client no longer receives mouse or speech events from Double Agent (unless it becomes input-active again). Double Agent sends this event only to the client that becomes non-input-active.
</para>
<para>This event is signalled when your client application is input-active and the user chooses a another client's <see cref="T:DoubleAgent.Control.Command" /> in a character's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Menu">pop-up menu</see> or the <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#VoiceCommands">Voice Commands</see> window, or you call the <see cref="M:DoubleAgent.Control.Character.Activate" /> method and set the <paramref name="State" /> parameter to 0 (<see cref="F:DoubleAgent.Control.ActiveStateType.Inactive" />). It may also occur when the user selects the name of another character by clicking or speaking. You also get this event when your character is hidden or another character becomes visible.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlDeactivateInputEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlDeactivateInput" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlDefaultCharacterChange">
<summary>Signalled when the user changes the default character.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlDefaultCharacterChangeEvent" /> Object that contains the event data: <para /> <see cref="F:CtlDefaultCharacterChangeEvent.CharGUID" /> <b>…</b> The unique identifier of the new default character.</param>
<remarks>
<para>This event indicates that the user has changed the character assigned as the user's default character. Double Agent sends this only to clients that have loaded the default character.
</para>
<para>When the new character appears, it assumes the same size as any already loaded instance of the character, or the size of the previous default character (in that order).
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlDefaultCharacterChangeEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlDefaultCharacterChange" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlDragComplete">
<summary>Signalled when the user stops dragging a character.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlDragCompleteEvent" /> Object that contains the event data: <para /> <see cref="F:CtlDragCompleteEvent.CharacterID" /> <b>…</b> The unique identifier of the character that was dragged.<para /> <see cref="F:CtlDragCompleteEvent.Button" /> <b>…</b> A numeric value that identifies which mouse button was pressed and released to cause the event. The <paramref name="Button" /> parameter is a bit field with bits corresponding to the left button (bit 0) (&amp;H0001), right button (bit 1) (&amp;H0002), and middle button (bit 2) (&amp;H0004). Only one of the bits is set, indicating the mouse button that caused the event. If the character has a <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>, and bit 13 (&amp;H1000) is also set, the click occurred on the <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>.<para /> <see cref="F:CtlDragCompleteEvent.Shift" /> <b>…</b> A numeric value that corresponds to the state of the Shift, Ctrl, and Alt keys when the mouse button was pressed or released. The <paramref name="Shift" /> parameter is a bit field with bits corresponding to the Shift key (bit 0) (&amp;H0001), the Ctrl key (bit 1) (&amp;H0002), and the Alt key (bit 2) (&amp;H0004). A bit is set if the key is down. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are down. For example, if both Ctrl and Alt were down, the  value of <paramref name="Shift" /> would be 6.<para /> <see cref="F:CtlDragCompleteEvent.X" /> <b>…</b> The current horizontal location of the mouse pointer, in pixels, relative to the left side of the screen.<para /> <see cref="F:CtlDragCompleteEvent.Y" /> <b>…</b> The current vertical location of the mouse pointer, in pixels, relative to the top of the screen.</param>
<remarks>
<para>This event is sent only to the input-active client of a character. When the user drags a character with no input-active client, Double Agent sets its current input-active client as the last input-active client, sending the <see cref="E:AxControl.CtlActivateInput" /> event to that client, and then sending the <see cref="E:AxControl.CtlDragStart" /> and CtlDragComplete events.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlDragCompleteEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlDragComplete" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlDragStart">
<summary>Signalled when the user starts dragging a character.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlDragStartEvent" /> Object that contains the event data: <para /> <see cref="F:CtlDragStartEvent.CharacterID" /> <b>…</b> The unique identifier of the character that's being dragged.<para /> <see cref="F:CtlDragStartEvent.Button" /> <b>…</b> A numeric value that identifies which mouse button was pressed and released to cause the event. The <paramref name="Button" /> parameter is a bit field with bits corresponding to the left button (bit 0) (&amp;H0001), right button (bit 1) (&amp;H0002), and middle button (bit 2) (&amp;H0004). Only one of the bits is set, indicating the mouse button that caused the event. If the character has a <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>, and bit 13 (&amp;H1000) is also set, the click occurred on the <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>.<para /> <see cref="F:CtlDragStartEvent.Shift" /> <b>…</b> A numeric value that corresponds to the state of the Shift, Ctrl, and Alt keys when the mouse button was pressed or released. The <paramref name="Shift" /> parameter is a bit field with bits corresponding to the Shift key (bit 0) (&amp;H0001), the Ctrl key (bit 1) (&amp;H0002), and the Alt key (bit 2) (&amp;H0004). A bit is set if the key is down. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are down. For example, if both Ctrl and Alt were down, the  value of <paramref name="Shift" /> would be 6.<para /> <see cref="F:CtlDragStartEvent.X" /> <b>…</b> The current horizontal location of the mouse pointer, in pixels, relative to the left side of the screen.<para /> <see cref="F:CtlDragStartEvent.Y" /> <b>…</b> The current vertical location of the mouse pointer, in pixels, relative to the top of the screen.</param>
<remarks>
<para>This event is sent only to the input-active client of a character. When the user drags a character with no input-active client, Double Agent sets its current input-active client as the last input-active client, sending the <see cref="E:AxControl.CtlActivateInput" /> event to that client, and then sending the CtlDragStart event.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlDragStartEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlDragStart" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlHide">
<summary>Signalled when a character is hidden.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlHideEvent" /> Object that contains the event data: <para /> <see cref="F:CtlHideEvent.CharacterID" /> <b>…</b> The unique identifier of the character that was hidden.<para /> <see cref="F:CtlHideEvent.Cause" /> <b>…</b> A <see cref="T:DoubleAgent.Control.VisibilityCauseType" /> value that indicates what caused the character to be hidden: 
<list type="table">
<item name="UserHid"><term xml:space="preserve">
1 = UserHid
</term>
<description>The user hid the character using the command on the character's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see> or using speech input.</description>
</item>
<item name="ProgramHid"><term xml:space="preserve">
3 = ProgramHid
</term>
<description>Your application hid the character.</description>
</item>
<item name="OtherProgramHid"><term xml:space="preserve">
5 = OtherProgramHid
</term>
<description>Another client application hid the character.</description>
</item>
</list>
</param>
<remarks>
<para>Double Agent sends this event to all clients of the character. To query the current state of the character, use the <see cref="P:DoubleAgent.Control.Character.Visible" /> property.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlHideEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlHide" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlIdleComplete">
<summary>Signalled when Double Agent ends the Idling state of a character.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlIdleCompleteEvent" /> Object that contains the event data: <para /> <see cref="F:CtlIdleCompleteEvent.CharacterID" /> <b>…</b> The unique identifier of the Idling character.</param>
<remarks>
<para>Double Agent sends this event to all clients of the character.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlIdleCompleteEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlIdleComplete" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlIdleStart">
<summary>Signalled when Double Agent sets a character to the Idling state.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlIdleStartEvent" /> Object that contains the event data: <para /> <see cref="F:CtlIdleStartEvent.CharacterID" /> <b>…</b> The unique identifier of the Idling character.</param>
<remarks>
<para>Double Agent sends this event to all clients of the character.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlIdleStartEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlIdleStart" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlListenComplete">
<summary>Signalled when Listening mode (speech recognition) has ended.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlListenCompleteEvent" /> Object that contains the event data: <para /> <see cref="F:CtlListenCompleteEvent.CharacterID" /> <b>…</b> The unique identifier of the listening character.<para /> <see cref="F:CtlListenCompleteEvent.Cause" /> <b>…</b> The cause of the ListenComplete event.
<list type="table">
<item><term xml:space="preserve">
1 = ProgramDisabled
</term>
<description>This program turned off the Listening mode with the <see cref="M:DoubleAgent.Control.Character.Listen" /> method.</description>
</item>
<item><term xml:space="preserve">
2 = ProgramTimedOut
</term>
<description>The Listening mode was started by this program with the <see cref="M:DoubleAgent.Control.Character.Listen" /> method, and it timed out.</description>
</item>
<item><term xml:space="preserve">
3 = UserTimedOut
</term>
<description>The Listening mode was started with the Listening key, and it timed out.</description>
</item>
<item><term xml:space="preserve">
4 = UserReleasedKey
</term>
<description>The Listening mode was started with the Listening key, and the key was released.</description>
</item>
<item><term xml:space="preserve">
5 = UserSpeechEnded
</term>
<description>Speech recognition has produced a result.</description>
</item>
<item><term xml:space="preserve">
6 = CharacterClientDeactivated
</term>
<description>The character is no longer active or it's active client has changed.</description>
</item>
<item><term xml:space="preserve">
7 = DefaultCharacterChanged
</term>
<description>The default character was changed in the <see cref="e08466be-419c-11e1-9d4f-002421116fb2#Gallery">Advanced Character Options</see> window.</description>
</item>
<item><term xml:space="preserve">
8 = UserDisabled
</term>
<description>Speech recognition was disabled in the <see cref="e08466be-419c-11e1-9d4f-002421116fb2#SpeechInput">Advanced Character Options</see> window.</description>
</item>
</list>
</param>
<remarks>
<para>This event is sent to all clients when the Listening mode time-out ends, after the user releases the Listening key, when the input-active client calls the <see cref="M:DoubleAgent.Control.Character.Listen" /> method with False, or when the user has finished speaking. You can use this event to determine when to resume spoken output.
</para>
<para>If you turn on Listening mode using the <see cref="M:DoubleAgent.Control.Character.Listen" /> method and then the user presses the Listening key, the Listening mode resets and continues until the Listening key time-out completes, the Listening key is released, or the user finishes speaking, whichever is later. In this situation, you will <em>not</em> receive a ListenComplete event until the Listening key's mode completes.
</para>
<para>The event returns the <paramref name="CharacterID" /> to the clients that currently have this character loaded. All other clients receive a null <paramref name="CharacterID" /> (empty string).
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlListenCompleteEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlListenComplete" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlListenStart">
<summary>Signalled when Listening mode (speech recognition) begins.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlListenStartEvent" /> Object that contains the event data: <para /> <see cref="F:CtlListenStartEvent.CharacterID" /> <b>…</b> The unique identifier of the listening character.</param>
<remarks>
<para>This event is sent to all clients when Listening mode begins because the user pressed the Listening key or the input-active client called the <see cref="M:DoubleAgent.Control.Character.Listen" /> method with True. You can use this event to avoid having your character speak while Listening mode is active.
</para>
<para>If you turn on Listening mode with the <see cref="M:DoubleAgent.Control.Character.Listen" /> method and then the user presses the Listening key, the Listening mode resets and continues until the Listening key time-out completes, the Listening key is released, or the user finishes speaking, whichever is later. In this situation, when Listening mode is already on, you will <em>not</em> get an additional ListenStart event when the user presses the Listening key.
</para>
<para>The event returns the <paramref name="CharacterID" /> to the clients that currently have this character loaded. All other clients receive a null <paramref name="CharacterID" /> (empty string).
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlListenStartEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlListenStart" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlMove">
<summary>Signalled when a character has moved.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlMoveEvent" /> Object that contains the event data: <para /> <see cref="F:CtlMoveEvent.CharacterID" /> <b>…</b> The unique identifier of the character that was moved.<para /> <see cref="F:CtlMoveEvent.X" /> <b>…</b> The character's new horizontal location, in pixels, relative to the left side of the screen.<para /> <see cref="F:CtlMoveEvent.Y" /> <b>…</b> The character's new vertical location, in pixels, relative to the top of the screen.<para /> <see cref="F:CtlMoveEvent.Cause" /> <b>…</b> The reason the character moved: 
<list type="table">
<item name="UserMoved"><term xml:space="preserve">
1 = UserMoved
</term>
<description>The user dragged the character.</description>
</item>
<item name="ProgramMoved"><term xml:space="preserve">
2 = ProgramMoved
</term>
<description>Your client application moved the character.</description>
</item>
<item name="OtherProgramMoved"><term xml:space="preserve">
3 = OtherProgramMoved
</term>
<description>Another client application moved the character.</description>
</item>
</list>
</param>
<remarks>
<para>This event is signalled when the user or an application changes the character's position. Coordinates are relevant to the upper left corner of the screen. This event is sent only to the clients of the character (applications that have loaded the character).
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlMoveEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlMove" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlRequestComplete">
<summary>Signalled when Double Agent completes a queued request.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlRequestCompleteEvent" /> Object that contains the event data: <para /> <see cref="F:CtlRequestCompleteEvent.Request" /> <b>…</b> The <see cref="T:DoubleAgent.Control.Request" /> Object that identifies the completed request.</param>
<remarks>
<para>This event provides a <see cref="T:DoubleAgent.Control.Request" /> Object. Because requests are processed asynchronously, you can use this event to determine when Double Agent finishes processing a request (such as a <see cref="M:DoubleAgent.Control.Character.Prepare" />, <see cref="M:DoubleAgent.Control.Character.Play" />, or <see cref="M:DoubleAgent.Control.Character.Speak" /> method) to synchronize this event with other requests generated by your application. Double Agent sends the event only to the client that created the reference to the <see cref="T:DoubleAgent.Control.Request" /> Object, and only if you defined a global variable for the request reference.
</para>
<codeSample><code xml:space="preserve" language="vbscript">Dim MyRequest 
Dim Genie

Sub window_Onload
    control.Characters.Load "Genie","Genie.acs"

    Set Genie = control.Characters("Genie")

    ' This syntax will generate CtlRequestStart and CtlRequestComplete events.
    Set MyRequest = Genie.Show(False)
    ' This syntax will not generate CtlRequestStart and CtlRequestComplete events.
    Genie.Hide False
End Sub

Sub control_CtlRequestComplete(ByVal Request)
    If Request Is MyRequest Then
        status = "Genie was shown"
End Sub</code>
<para>Because animation <see cref="T:DoubleAgent.Control.Request" /> Objects don't get assigned until Double Agent has queued the request, make sure that the <see cref="T:DoubleAgent.Control.Request" /> Object exists before you attempt to evaluate it. For example, in Visual Basic, if you use a conditional to test whether a specific request was completed, you can use the Nothing keyword.
</para>
<code xml:space="preserve" language="vbscript">Sub control_CtlRequestComplete (ByVal Request)
    If Not (MyRequest Is Nothing) Then
        If Request Is MyRequest Then
            '-- Do whatever
        End If
    End If
End Sub</code></codeSample></remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlRequestCompleteEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlRequestComplete" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlRequestStart">
<summary>Signalled when Double Agent begins a queued request.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlRequestStartEvent" /> Object that contains the event data: <para /> <see cref="F:CtlRequestStartEvent.Request" /> <b>…</b> The <see cref="T:DoubleAgent.Control.Request" /> Object that identifies the queued request.</param>
<remarks>
<para>The event provides a <see cref="T:DoubleAgent.Control.Request" /> Object. Because requests are processed asynchronously, you can use this event to determine when Double Agent begins processing a request (such as a <see cref="M:DoubleAgent.Control.Character.Prepare" />, <see cref="M:DoubleAgent.Control.Character.Play" />, or <see cref="M:DoubleAgent.Control.Character.Speak" /> method) and thereby synchronize this with other requests generated by your application. The event is sent only to the client that created the reference to the <see cref="T:DoubleAgent.Control.Request" /> Object, and only if you defined a global variable for the request reference.
</para>
<codeSample><code xml:space="preserve" language="vbscript">Dim MyRequest 
Dim Genie 

Sub window_Onload
    control.Characters.Load "Genie", "Genie.acs"

    Set Genie = control.Characters("Genie")

    ' This syntax will generate CtlRequestStart and CtlRequestComplete events.
    Set MyRequest = Genie.Show(False)

    ' This syntax will not generate CtlRequestStart and CtlRequestComplete events.
    Genie.Hide False
End Sub

Sub control_CtlRequestStart(ByVal Request)
    If Request Is MyRequest Then
        status = "Genie is showing"
End Sub</code>
<para>The "Request.Status" property is 4 (InProgress) for the<see cref="T:DoubleAgent.Control.Request" /> Object.
</para>
<para>Because animation <see cref="T:DoubleAgent.Control.Request" /> Objects don't get assigned until Double Agent has queued the request, make sure that the <see cref="T:DoubleAgent.Control.Request" /> Object exists before you attempt to evaluate it. For example, in Visual Basic, if you use a conditional to test whether a specific request was completed, you can use the Nothing keyword.
</para>
<code xml:space="preserve" language="vbscript">Sub control_CtlRequestStart (ByVal Request)
    If Not (MyRequest Is Nothing) Then
        If Request Is MyRequest Then
            '-- Do whatever
        End If
    End If
End Sub</code></codeSample></remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlRequestStartEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlRequestStart" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlShow">
<summary>Signalled when a character is displayed.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlShowEvent" /> Object that contains the event data: <para /> <see cref="F:CtlShowEvent.CharacterID" /> <b>…</b> The unique identifier of the character that was shown.<para /> <see cref="F:CtlShowEvent.Cause" /> <b>…</b> A <see cref="T:DoubleAgent.Control.VisibilityCauseType" /> value that indicates what caused the character to be shown. 
<list type="table">
<item name="UserShowed"><term xml:space="preserve">
2 = UserShowed
</term>
<description>The user showed the character using the command on the character's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see> or using speech input.</description>
</item>
<item name="ProgramShowed"><term xml:space="preserve">
4 = ProgramShowed
</term>
<description>Your application showed the character.</description>
</item>
<item name="OtherProgramShowed"><term xml:space="preserve">
6 = OtherProgramShowed
</term>
<description>Another client application showed the character.</description>
</item>
</list>
</param>
<remarks>
<para>Double Agent sends this event to all clients of the character. To query the current state of the character, use the <see cref="P:DoubleAgent.Control.Character.Visible" /> property.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlShowEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlShow" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlSize">
<summary>Signalled when a character's size changes.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlSizeEvent" /> Object that contains the event data: <para /> <see cref="F:CtlSizeEvent.CharacterID" /> <b>…</b> The unique identifier of the character that was resized.<para /> <see cref="F:CtlSizeEvent.Width" /> <b>…</b> The character's new width, in pixels.<para /> <see cref="F:CtlSizeEvent.Height" /> <b>…</b> The character's new height, in pixels.</param>
<remarks>
<para>This event is signalled when an application changes the size of a character. This event is sent only to the clients of the character (applications that have loaded the character).
</para>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlSizeEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlSize" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlSpeechStart">
<summary>Signalled when the character starts speaking for the <see cref="M:DoubleAgent.Control.Character.SpeakFormatted" /> method.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlSpeechStartEvent" /> Object that contains the event data: <para /> <see cref="F:CtlSpeechStartEvent.CharacterID" /> <b>…</b> The unique identifier of the speaking character.<para /> <see cref="F:CtlSpeechStartEvent.FormattedText" /> <b>…</b> The <see cref="T:DoubleAgent.Control.FormattedText" /> that's being spoken.</param>
<remarks>
<note name="FormattedText">The <paramref name="FormattedText" /> parameter may not contain the same reference pointer as the <paramref name="FormattedText" /> parameter passed to the <see cref="M:DoubleAgent.Control.Character.SpeakFormatted" /> method, but the underlying data is the same.</note>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlSpeechStartEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlSpeechStart" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlSpeechEnd">
<summary>Signalled when the character stops speaking for the <see cref="M:DoubleAgent.Control.Character.SpeakFormatted" /> method.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlSpeechEndEvent" /> Object that contains the event data: <para /> <see cref="F:CtlSpeechEndEvent.CharacterID" /> <b>…</b> The unique identifier of the speaking character.<para /> <see cref="F:CtlSpeechEndEvent.FormattedText" /> <b>…</b> The <see cref="T:DoubleAgent.Control.FormattedText" /> that's being spoken.<para /> <see cref="F:CtlSpeechEndEvent.Stopped" /> <b>…</b> A boolean value that indicates if the speech was stopped before completion.</param>
<remarks>
<note name="FormattedText">The <paramref name="FormattedText" /> parameter may not contain the same reference pointer as the <paramref name="FormattedText" /> parameter passed to the <see cref="M:DoubleAgent.Control.Character.SpeakFormatted" /> method, but the underlying data is the same.</note>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlSpeechEndEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlSpeechEnd" /> event.
</para>
</summary>
</member>

<member name="E:DoubleAgent.AxControl.AxControl.CtlSpeechWord">
<summary>Signalled when the character reaches a new word for the <see cref="M:DoubleAgent.Control.Character.SpeakFormatted" /> method.</summary>
<param name="Sender">The source of the event.</param>
<param name="E">A <see cref="T:CtlSpeechWordEvent" /> Object that contains the event data: <para /> <see cref="F:CtlSpeechWordEvent.CharacterID" /> <b>…</b> The unique identifier of the speaking character.<para /> <see cref="F:CtlSpeechWordEvent.FormattedText" /> <b>…</b> The <see cref="T:DoubleAgent.Control.FormattedText" /> that's being spoken.<para /> <see cref="F:CtlSpeechWordEvent.WordIndex" /> <b>…</b> A numeric value that identifies the word that is currently being spoken.</param>
<remarks>
<para>Because events are signalled asynchronously, the synchronization between the speech output and the receipt of this event cannot be exact. However, <paramref name="WordIndex" /> will generally identify the <em>next</em> word to be spoken.
</para>
<note name="FormattedText">The <paramref name="FormattedText" /> parameter may not contain the same reference pointer as the <paramref name="FormattedText" /> parameter passed to the <see cref="M:DoubleAgent.Control.Character.SpeakFormatted" /> method, but the underlying data is the same.</note>
</remarks>
</member>

<member name="T:DoubleAgent.AxControl.CtlSpeechWordEventHandler">
<summary>
<para>See the <see cref="E:AxControl.CtlSpeechWord" /> event.
</para>
</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlActivateInputEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlActivateInput" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlActivateInputEvent.CharacterID">
<summary> The unique identifier of the character that has become input-active.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlActiveClientChangeEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlActiveClientChange" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlActiveClientChangeEvent.Active">
<summary> True if the character has become the active client or False if it's no longer the active client.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlActiveClientChangeEvent.CharacterID">
<summary> The unique identifier of the character that has become active or inactive.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlBalloonHideEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlBalloonHide" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlBalloonHideEvent.CharacterID">
<summary> The unique identifier of the character who's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Balloon">word balloon</see> was hidden.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlBalloonShowEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlBalloonShow" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlBalloonShowEvent.CharacterID">
<summary> The unique identifier of the character who's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Balloon">word balloon</see> was shown.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlBookmarkEvent.BookmarkID">
<summary> The bookmark's unique identifier.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlBookmarkEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlBookmark" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlClickEvent.Button">
<summary> A numeric value that identifies which mouse button was pressed and released to cause the event. The <paramref name="Button" /> parameter is a bit field with bits corresponding to the left button (bit 0) (&amp;H0001), right button (bit 1) (&amp;H0002), and middle button (bit 2) (&amp;H0004). Only one of the bits is set, indicating the mouse button that caused the event. If the character has a <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>, and bit 13 (&amp;H1000) is also set, the click occurred on the <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlClickEvent.CharacterID">
<summary> The unique identifier of the character that was clicked.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlClickEvent.Shift">
<summary> A numeric value that corresponds to the state of the Shift, Ctrl, and Alt keys when the mouse button was pressed or released. The <paramref name="Shift" /> parameter is a bit field with bits corresponding to the Shift key (bit 0) (&amp;H0001), the Ctrl key (bit 1) (&amp;H0002), and the Alt key (bit 2) (&amp;H0004). A bit is set if the key is down. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are down. For example, if both Ctrl and Alt were down, the  value of <paramref name="Shift" /> would be 6.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlClickEvent.X">
<summary> The current horizontal location of the mouse pointer, in pixels, relative to the left side of the screen.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlClickEvent.Y">
<summary> The current vertical location of the mouse pointer, in pixels, relative to the top of the screen.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlClickEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlClick" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlCommandEvent.UserInput">
<summary> A <see cref="T:DoubleAgent.Control.UserInput" /> Object that identifies the chosen command.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlCommandEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlCommand" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlDblClickEvent.Button">
<summary> A numeric value that identifies which mouse button was pressed and released to cause the event. The <paramref name="Button" /> parameter is a bit field with bits corresponding to the left button (bit 0) (&amp;H0001), right button (bit 1) (&amp;H0002), and middle button (bit 2) (&amp;H0004). Only one of the bits is set, indicating the mouse button that caused the event. If the character has a <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>, and bit 13 (&amp;H1000) is also set, the click occurred on the <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlDblClickEvent.CharacterID">
<summary> The unique identifier of the character that was double-clicked.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlDblClickEvent.Shift">
<summary> A numeric value that corresponds to the state of the Shift, Ctrl, and Alt keys when the mouse button was pressed or released. The <paramref name="Shift" /> parameter is a bit field with bits corresponding to the Shift key (bit 0) (&amp;H0001), the Ctrl key (bit 1) (&amp;H0002), and the Alt key (bit 2) (&amp;H0004). A bit is set if the key is down. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are down. For example, if both Ctrl and Alt were down, the  value of <paramref name="Shift" /> would be 6.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlDblClickEvent.X">
<summary> The current horizontal location of the mouse pointer, in pixels, relative to the left side of the screen.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlDblClickEvent.Y">
<summary> The current vertical location of the mouse pointer, in pixels, relative to the top of the screen.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlDblClickEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlDblClick" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlDeactivateInputEvent.CharacterID">
<summary> The unique identifier of the character that has become non-input-active.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlDeactivateInputEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlDeactivateInput" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlDefaultCharacterChangeEvent.CharGUID">
<summary> The unique identifier of the new default character.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlDefaultCharacterChangeEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlDefaultCharacterChange" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlDragCompleteEvent.Button">
<summary> A numeric value that identifies which mouse button was pressed and released to cause the event. The <paramref name="Button" /> parameter is a bit field with bits corresponding to the left button (bit 0) (&amp;H0001), right button (bit 1) (&amp;H0002), and middle button (bit 2) (&amp;H0004). Only one of the bits is set, indicating the mouse button that caused the event. If the character has a <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>, and bit 13 (&amp;H1000) is also set, the click occurred on the <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlDragCompleteEvent.CharacterID">
<summary> The unique identifier of the character that was dragged.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlDragCompleteEvent.Shift">
<summary> A numeric value that corresponds to the state of the Shift, Ctrl, and Alt keys when the mouse button was pressed or released. The <paramref name="Shift" /> parameter is a bit field with bits corresponding to the Shift key (bit 0) (&amp;H0001), the Ctrl key (bit 1) (&amp;H0002), and the Alt key (bit 2) (&amp;H0004). A bit is set if the key is down. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are down. For example, if both Ctrl and Alt were down, the  value of <paramref name="Shift" /> would be 6.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlDragCompleteEvent.X">
<summary> The current horizontal location of the mouse pointer, in pixels, relative to the left side of the screen.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlDragCompleteEvent.Y">
<summary> The current vertical location of the mouse pointer, in pixels, relative to the top of the screen.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlDragCompleteEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlDragComplete" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlDragStartEvent.Button">
<summary> A numeric value that identifies which mouse button was pressed and released to cause the event. The <paramref name="Button" /> parameter is a bit field with bits corresponding to the left button (bit 0) (&amp;H0001), right button (bit 1) (&amp;H0002), and middle button (bit 2) (&amp;H0004). Only one of the bits is set, indicating the mouse button that caused the event. If the character has a <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>, and bit 13 (&amp;H1000) is also set, the click occurred on the <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see>.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlDragStartEvent.CharacterID">
<summary> The unique identifier of the character that's being dragged.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlDragStartEvent.Shift">
<summary> A numeric value that corresponds to the state of the Shift, Ctrl, and Alt keys when the mouse button was pressed or released. The <paramref name="Shift" /> parameter is a bit field with bits corresponding to the Shift key (bit 0) (&amp;H0001), the Ctrl key (bit 1) (&amp;H0002), and the Alt key (bit 2) (&amp;H0004). A bit is set if the key is down. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are down. For example, if both Ctrl and Alt were down, the  value of <paramref name="Shift" /> would be 6.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlDragStartEvent.X">
<summary> The current horizontal location of the mouse pointer, in pixels, relative to the left side of the screen.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlDragStartEvent.Y">
<summary> The current vertical location of the mouse pointer, in pixels, relative to the top of the screen.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlDragStartEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlDragStart" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlHideEvent.Cause">
<summary> A <see cref="T:DoubleAgent.Control.VisibilityCauseType" /> value that indicates what caused the character to be hidden: 
<list type="table">
<item name="UserHid"><term xml:space="preserve">
1 = UserHid
</term>
<description>The user hid the character using the command on the character's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see> or using speech input.</description>
</item>
<item name="ProgramHid"><term xml:space="preserve">
3 = ProgramHid
</term>
<description>Your application hid the character.</description>
</item>
<item name="OtherProgramHid"><term xml:space="preserve">
5 = OtherProgramHid
</term>
<description>Another client application hid the character.</description>
</item>
</list>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlHideEvent.CharacterID">
<summary> The unique identifier of the character that was hidden.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlHideEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlHide" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlIdleCompleteEvent.CharacterID">
<summary> The unique identifier of the Idling character.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlIdleCompleteEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlIdleComplete" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlIdleStartEvent.CharacterID">
<summary> The unique identifier of the Idling character.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlIdleStartEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlIdleStart" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlListenCompleteEvent.Cause">
<summary> The cause of the ListenComplete event.
<list type="table">
<item><term xml:space="preserve">
1 = ProgramDisabled
</term>
<description>This program turned off the Listening mode with the <see cref="M:DoubleAgent.Control.Character.Listen" /> method.</description>
</item>
<item><term xml:space="preserve">
2 = ProgramTimedOut
</term>
<description>The Listening mode was started by this program with the <see cref="M:DoubleAgent.Control.Character.Listen" /> method, and it timed out.</description>
</item>
<item><term xml:space="preserve">
3 = UserTimedOut
</term>
<description>The Listening mode was started with the Listening key, and it timed out.</description>
</item>
<item><term xml:space="preserve">
4 = UserReleasedKey
</term>
<description>The Listening mode was started with the Listening key, and the key was released.</description>
</item>
<item><term xml:space="preserve">
5 = UserSpeechEnded
</term>
<description>Speech recognition has produced a result.</description>
</item>
<item><term xml:space="preserve">
6 = CharacterClientDeactivated
</term>
<description>The character is no longer active or it's active client has changed.</description>
</item>
<item><term xml:space="preserve">
7 = DefaultCharacterChanged
</term>
<description>The default character was changed in the <see cref="e08466be-419c-11e1-9d4f-002421116fb2#Gallery">Advanced Character Options</see> window.</description>
</item>
<item><term xml:space="preserve">
8 = UserDisabled
</term>
<description>Speech recognition was disabled in the <see cref="e08466be-419c-11e1-9d4f-002421116fb2#SpeechInput">Advanced Character Options</see> window.</description>
</item>
</list>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlListenCompleteEvent.CharacterID">
<summary> The unique identifier of the listening character.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlListenCompleteEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlListenComplete" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlListenStartEvent.CharacterID">
<summary> The unique identifier of the listening character.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlListenStartEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlListenStart" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlMoveEvent.Cause">
<summary> The reason the character moved:
<list type="table">
<item name="UserMoved"><term xml:space="preserve">
1 = UserMoved
</term>
<description>The user dragged the character.</description>
</item>
<item name="ProgramMoved"><term xml:space="preserve">
2 = ProgramMoved
</term>
<description>Your client application moved the character.</description>
</item>
<item name="OtherProgramMoved"><term xml:space="preserve">
3 = OtherProgramMoved
</term>
<description>Another client application moved the character.</description>
</item>
</list>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlMoveEvent.CharacterID">
<summary> The unique identifier of the character that was moved.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlMoveEvent.X">
<summary> The character's new horizontal location, in pixels, relative to the left side of the screen.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlMoveEvent.Y">
<summary> The character's new vertical location, in pixels, relative to the top of the screen.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlMoveEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlMove" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlRequestCompleteEvent.Request">
<summary> The <see cref="T:DoubleAgent.Control.Request" /> Object that identifies the completed request.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlRequestCompleteEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlRequestComplete" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlRequestStartEvent.Request">
<summary> The <see cref="T:DoubleAgent.Control.Request" /> Object that identifies the queued request.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlRequestStartEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlRequestStart" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlShowEvent.Cause">
<summary> A <see cref="T:DoubleAgent.Control.VisibilityCauseType" /> value that indicates what caused the character to be shown. 
<list type="table">
<item name="UserShowed"><term xml:space="preserve">
2 = UserShowed
</term>
<description>The user showed the character using the command on the character's <see cref="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">notification icon</see> or using speech input.</description>
</item>
<item name="ProgramShowed"><term xml:space="preserve">
4 = ProgramShowed
</term>
<description>Your application showed the character.</description>
</item>
<item name="OtherProgramShowed"><term xml:space="preserve">
6 = OtherProgramShowed
</term>
<description>Another client application showed the character.</description>
</item>
</list>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlShowEvent.CharacterID">
<summary> The unique identifier of the character that was shown.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlShowEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlShow" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlSizeEvent.CharacterID">
<summary> The unique identifier of the character that was resized.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlSizeEvent.Height">
<summary> The character's new height, in pixels.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlSizeEvent.Width">
<summary> The character's new width, in pixels.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlSizeEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlSize" /> Event.
</para>
</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlSpeechStartEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlSpeechStart" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlSpeechStartEvent.CharacterID">
<summary> The unique identifier of the speaking character.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlSpeechStartEvent.FormattedText">
<summary> The <see cref="T:DoubleAgent.Control.FormattedText" /> that's being spoken.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlSpeechEndEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlSpeechEnd" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlSpeechEndEvent.CharacterID">
<summary> The unique identifier of the speaking character.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlSpeechEndEvent.FormattedText">
<summary> The <see cref="T:DoubleAgent.Control.FormattedText" /> that's being spoken.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlSpeechEndEvent.Stopped">
<summary> A boolean value that indicates if the speech was stopped before completion.</summary>
</member>

<member name="T:DoubleAgent.AxControl.CtlSpeechWordEvent">
<summary>
<para>Event arguments for the <see cref="E:AxControl.CtlSpeechWord" /> Event.
</para>
</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlSpeechWordEvent.CharacterID">
<summary> The unique identifier of the speaking character.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlSpeechWordEvent.FormattedText">
<summary> The <see cref="T:DoubleAgent.Control.FormattedText" /> that's being spoken.</summary>
</member>

<member name="F:DoubleAgent.AxControl.CtlSpeechWordEvent.WordIndex">
<summary> A numeric value that identifies the word that is currently being spoken.</summary>
</member>

<member name="T:DoubleAgent.AxControl.AxControl">
<summary>
<para>The AxControl Object is a managed class that makes the Double Agent control available as a Windows Forms control. It derives from System.Windows.Forms.Control.
</para>
</summary>
<remarks>
<para>The AxControl Object implements the same methods, properties, and events as the <see cref="T:DoubleAgent.Control.Control" /> Object.
</para>
<para>The ActiveX<sup>®</sup> appearance property names and the event names are prefixed with "Ctl", to avoid name collisions and to make them stand out. Also, the events receive their event data according to the pattern for Windows Forms controls.
</para>
</remarks>
</member>

</members>
</doc>
